https://docs.ansible.com/ansible/latest/installation_guide/installation_distros.html#installing-ansible-on-ubuntu
==============================================

TERMS USED IN ANSIBLE:

Ansible server: The machine where Ansible is installed and from where all tasks and playbooks will be run
Module: Basically a module is a command or set of similar commands meant to be executed on the client-side
Task: A task is a section that consists of a single procedure to be completed
Role: A way of organizing tasks and related files to be later called in a playbook
Fact: Information fetched from the client system from the global variables with the gather-facts operation
Inventory: File containing data about the ansible client servers (Host file / Inventory file)
Handler: Task which is called only if a notifier is present
Notifier: Section attributed to a task which calls a handler, if the output is changed
Playbook: It consists of code in YAML format, which describes tasks to be executed
Hosts/Nodes: Nodes/Servers, which are automated by an Ansible server

=======================1=============================

Ansible on ubuntu

$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible     |OR|     sudo apt-add-repository ppa:ansible/ansible
$ sudo apt-get install ansible
$ ansible --version

========================2============================
For ssh connection
ssh-keygen 
ssh-copy-id root@34.125.160.195
ssh root@34.125.160.195

In Cloud / node
chnage root pw - > sudo passwd root
move  to /etc/ssh/sshd_config 
Change PasswordAuthentication yes
	   PermitRootLogin yes

sudo systemctl restart sshd.service	   

add the key to the node machine so that we can ssh from master (on GCP instance SSH).
=======================3=============================

Ad-hoc commands (to check the nodes from master)

ansible all -i '34.125.112.111,' -m ping

root@ansible-master:~# echo "Testing ansible module" > AnsibleCopyTest.txt
root@ansible-master:~# ls
AnsibleCopyTest.txt
root@ansible-master:~# ansible all -i '34.125.112.111,' -m copy -a "src=AnsibleCopyTest.txt dest=/home/mrnumbrith"

ansible all -i '34.125.112.111,' -m copy -a "src=AnsibleCopyTest.txt dest=/home/mrnumbrith mode=0777"

===================================================
https://github.com/DeekshithSN/Ansible

ansible.cfg  -- > Configuration can be changed using that file.

Trying Playbook

---                                      # Start of the play book
- hosts: dev							 # Where should this run on by group name
  become: yes							 # As sudo (Yes) root.
  gather_facts: false					 # Facts in genral collects the information in details about the target server.if false wont collect any info.
  tasks:                                 # List of dictionaries.
    - name: Install application tree     # Just a name of task
      copy:								 # module name / type
        src: /home/mrnumbrith/test.sh
        dest: /home/mrnumbrith



===================================================
Host or inventory  -- > File need to created with group name and ip adress under them.
[dev]
34.125.112.111
ansible-playbook -i hosts copy.yaml      ---> to run the playbook

# We can also put the above details in etc/ansible/hosts file. 
Can be run using command -- >   ansible-playbook copy.yaml

# We can also use the host file wherever we need by change in etc/ansible/ansible.cfg 
vi /etc/ansible/ansible.cfg  --> #inventory       = /etc/ansible/hosts  #the name of the target folder.

#We can also create ansible.cfg file in local.
===================================================

# when you want use 2 groups 

[allmachine:children]   #So those group which includs IP.
dev
qa

[dev]
34.125.112.111

[qa]
34.125.120.47

===================================================

What is an Ansible Playbook?
An Ansible playbook is a file in which users create Ansible code, which is a structured collection of scripts that define the work of a server setup. 
They define a series of stages in a general IT process or a policy that your remote systems must follow.
Playbooks are collections of one or more plays that are performed in a certain order. A play is an ordered sequence of tasks performed against hosts 
from your inventory. The task to be done is defined by plays. Each play has a list of hosts to configure and responsibilities to complete. There are no 
standardized plays; each play must be written by an administrator.
YAML, a human-readable data processing language, is used in playbooks. “YAML ” is a sequence acronym that stands for “YAML Ain’t Markup Language.”

===================================================
ansible-playbook -i hosts copy.yaml --syntax-check
Dry Run  -->  ansible-playbook -i hosts copy.yaml -- check   
---
- hosts: dev
  become: yes
  gather_facts: false
  tasks:
    - name: copy the file test
      copy:
        src: /home/mrnumbrith/test.sh
        dest: /home/mrnumbrith
	- name: update
      command: apt-get update -y
    - name: install tree tool
      apt:
        name: tree
        state: present


===================================================
MULTIPLE 'PLAYS'

Playbooks with multiple 'plays' can orchestrate multi-machine deployments, running one play on your webservers,
then another play on your database servers, then a third play on your network infrastructure, and so on.

---
- hosts: localhost
  become: yes
  gather_facts: false
  tasks:
    - name: installing wget 
      apt:
        name: wget
        state: present 
    - name: download Jenkins
      get_url:
        url: https://updates.jenkins-ci.org/download/war/2.248/jenkins.war
        dest: /home/spovedd
    
- hosts: dev
  become: yes
  gather_facts: false
  tasks:
    - name: copy jenkins war to host machines
      copy:
        src: /home/spovedd/jenkins.war
        dest: /home/jenkins.war
    - name: creating folder structure and running jenkins in the background 
      shell: |
        mkdir -p /home/spovedd/jenkins
        mv /home/jenkins.war /home/spovedd/jenkins
        nohup java -jar /home/spovedd/jenkins/jenkins.war &
		
		
===================================================

MODULES

copy - Copy from ansible Master to Node.
fetch - fetchs the files from nodes to Master( Creates Directory with IP)
yum - install , remove , downgrade on CentOS
apt - install , remove , downgrade on Ubuntu/Debian.
command - Use linex commands 
Shell - Both modules execute commands on target nodes but in a sensible different way. 
The command modules execute commands on the target machine without using the target shell,
it simply executes the command. The target shell is for example the popular bash , zsh , or sh .
file - Ansible file module is used to creating and deleting the file or multiple files in the remote server.
replace - Replace all instances of a particular string in a file using a back-referenced regular expression.(https://www.nbtechsupport.co.in/2021/04/ansible-replace-module.html)
get_url:     Downloads files from a URL to the remote hosts.
expect: Sends and receives responses to interactive prompts during playbook execution, 
allowing automation of tasks that require user interaction.
---
- hosts: dev
  become: yes
  gather_facts: false
  tasks:
    - name: Case insensitive password string match
      expect:
        command: passwd username
        responses:
          (?i)password: "MySekretPa$$word"
  # you don't want to show passwords in your logs    # Data privecy.
      no_log: true 
	  

===================================================
VARIABLES
Variables  -   It helps you to use and assign a value to a variable and use that anywhere in the playbook. 
One can put conditions around the value of the variables and accordingly use them in the playbook.

---
 - hosts: dev
   vars:
     salutations: Hello guys!
   tasks:
   - name: Ansible Variable Basic Usage
     debug:
       msg:  "{{ salutations }}"
	   
	   
# Variable can also be stored in other .yml file , can be access using 
var_files:
  - variables.yaml
  
===================================================
CONDITION
Ansible supports conditional evaluations before executing a specific task on the target hosts. 
If the set condition is true, Ansible will go ahead and perform the task. If the condition is not true (unmet), Ansible will skip the specified task.

- hosts: localhost
  gather_facts: true
  tasks:
  - name: run apt-get
    command: apt-get install tree -y
    when: ansible_distribution == "Ubuntu"
  - name: run yum update 
    command: yum update
    when: ansible_distribution == "CentOS"
  - name: run yum
    command: yum install tree -y
    when: ansible_distribution == "CentOS"
	
	
===================================================
LOOPS

Ansible loop is used to repeat any task or a part of code multiple times in an Ansible-playbook. It includes the creation of multiple users using the 
user module, installing multiple packages using apt or yum module or changing permissions on several files or folders using the file module	

---
- hosts: ubuntu_webserver
  tasks:
    - name: Create new users
      user:
        name: '{{ item }}'
        state: present
      loop:
        - john
        - mike
        - andrew
        
Ansible with_items is a keyword which you will use in playbook and provide a list of items under it. 
These are some scenarios when you have a simple list, an item is list is also a list, each item in list is a combination of few variables.		
Example project on ansible (https://github.com/DeekshithSN/Ansible/blob/master/loops.yml)

===================================================

#BLOCKS  (Reusanlity of code , one section of code is same for all) https://cn-ansibledoc.readthedocs.io/zh_CN/latest/user_guide/playbooks_blocks.html
Blocks create logical groups of tasks. Blocks also offer ways to handle task errors, similar to exception handling in many programming languages

 tasks:
   - name: Install, configure, and start Apache
     block:
       - name: install httpd and memcached
         yum:
           name:
           - httpd
           - memcached
           state: present
       - name: apply the foo config template
         template:
           src: templates/src.j2
           dest: /etc/foo.conf
       - name: start service bar and enable it
         service:
           name: bar
           state: started
           enabled: True
     when: ansible_facts['distribution'] == 'CentOS'
     become: true
     become_user: root
     ignore_errors: yes
	 
	 
#RESCUE   (If block fails , rescue will exicute)
Handling errors with blocks
You can control how Ansible responds to task errors using blocks with rescue and always sections.

Rescue blocks specify tasks to run when an earlier task in a block fails. This approach is similar to exception handling in many programming languages. Ansible only runs rescue blocks after a task returns a ‘failed’ state. Bad task definitions and unreachable hosts will not trigger the rescue block.

Block error handling example
 tasks:
 - name: Handle the error
   block:
     - debug:
         msg: 'I execute normally'
     - name: i force a failure
       command: /bin/false
     - debug:
         msg: 'I never execute, due to the above task failing, :-('
   rescue:
     - debug:
         msg: 'I caught an error, can do stuff here to fix it, :-)'	 

#ALWAYS (whatever happens will exicute)
You can also add an always section to a block. Tasks in the always section run no matter what the task status of the previous block is.

Block with always section
 - name: Always do X
   block:
     - debug:
         msg: 'I execute normally'
     - name: i force a failure
       command: /bin/false
     - debug:
         msg: 'I never execute :-('
   always:
     - debug:
         msg: "This always executes, :-)"
		 
		 
===================================================
HANDLER
Sometimes you want a task to run only when a change is made on a machine. For example, you may want to restart a service 
if a task updates the configuration of that service, but not if the configuration is unchanged. Ansible uses handlers to address this use case.	 
Handlers help you avoid unnecessary actions and ensure that the desired state of the system is maintained. 
They are a way to respond to changes that have been made and trigger specific actions accordingly.

ROLES
Roles let you automatically load related vars, files, tasks, handlers, and other Ansible artifacts based on a known file structure.
 After you group your content in roles, you can easily reuse them and share them with other users.

ANSIBLE GALAXY
Ansible Galaxy is a galaxy website where users can share roles and to a command-line tool for installing, creating, and managing roles. 
Ansible Galaxy gives greater visibility to one of Ansible's most exciting features, such as application installation or reusable roles for server configuration. 



WHAT IS DIFFERENCE BETWEEN COPY AND TEMPLATE IN ANSIBLE? 
the copy module is useful when you want to copy an existing file without modification,
while the template module is useful when you want to create customized files with dynamic values.
(The main difference is that with copy, you can only copy an existing file as-is, without any modifications or customization. On the other hand, 
with template, you can use a template file that has placeholders or variables that Ansible can replace with specific values before copying it to a remote machine.)


ANSIBLE TOWER
Ansible Tower is like Ansible at a more enterprise level. It is a web-based solution for managing your organization with an easy user interface that provides 
a dashboard with all of the state summaries of all the hosts. And allows quick deployments, and monitors all configurations.

The tower allows us to share the SSH credentials without exposing them, logs all the jobs, manage inventories graphically, 
and syncs them with a wide variety of cloud providers.

Previously, Ansible Tower called the AWX project, is the fix to this problem. Especially those that render better as graphical rather than text-based output,
 such as real-time node monitoring.
 
===================================================
 
ANSIBLE VAULT
It is a feature in Ansible that allows you to encrypt sensitive data, such as passwords or API keys, that are used in playbooks or other Ansible configuration files.

Here are some related commands for working with Ansible Vault:

ansible-vault create: creates a new encrypted file.
ansible-vault edit: opens an existing encrypted file for editing.
ansible-vault view: allows you to view the contents of an encrypted file without decrypting it.
ansible-vault encrypt: encrypts an existing file that is not already encrypted.
ansible-vault decrypt: decrypts an encrypted file.
ansible-playbook --ask-vault-pass: prompts you to enter the vault password when running a playbook that uses an encrypted file.
ansible-vault rekey: changes the password for an existing encrypted file.
Using these commands, you can create, edit, view, encrypt, and decrypt encrypted files. You can also change the password for an existing encrypted file.
 When running a playbook that uses an encrypted file, you will be prompted to enter the vault password to decrypt the file and use the sensitive data contained 
 within it.
 
 
